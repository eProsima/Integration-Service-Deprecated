// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Keyed.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "Keyed.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

Keyed::Keyed()
{
    m_index = 0;



}

Keyed::~Keyed()
{
}

Keyed::Keyed(const Keyed &x)
{
    m_index = x.m_index;
    m_message = x.m_message;
}

Keyed::Keyed(Keyed &&x)
{
    m_index = x.m_index;
    m_message = std::move(x.m_message);
}

Keyed& Keyed::operator=(const Keyed &x)
{
    m_index = x.m_index;
    m_message = x.m_message;

    return *this;
}

Keyed& Keyed::operator=(Keyed &&x)
{
    m_index = x.m_index;
    m_message = std::move(x.m_message);

    return *this;
}

size_t Keyed::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;

    /* int16_t */
    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    /* std::string */
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;


    return current_alignment - initial_alignment;
}

size_t Keyed::getCdrSerializedSize(const Keyed& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    /* int16_t index */
    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    /* std::string message */
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.message().size() + 1;


    return current_alignment - initial_alignment;
}

void Keyed::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m_index;
    scdr << m_message;
}

void Keyed::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr >> m_index;
    dcdr >> m_message;
}

size_t Keyed::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;

     /* int16_t */
    current_align += 2 + eprosima::fastcdr::Cdr::alignment(current_align, 2);

     


    return current_align;
}

bool Keyed::isKeyDefined()
{
    return true;
}

void Keyed::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	(void) scdr;
	 scdr << m_index;  
	 
}