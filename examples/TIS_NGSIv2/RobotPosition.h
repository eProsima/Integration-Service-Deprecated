// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file RobotPosition.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _RobotPosition_H_
#define _RobotPosition_H_

// TODO Poner en el contexto.

#include <stdint.h>
#include <array>
#include <string>
#include <vector>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(RobotPosition_SOURCE)
#define RobotPosition_DllAPI __declspec( dllexport )
#else
#define RobotPosition_DllAPI __declspec( dllimport )
#endif // RobotPosition_SOURCE
#else
#define RobotPosition_DllAPI
#endif
#else
#define RobotPosition_DllAPI
#endif // _WIN32

namespace eprosima
{
    namespace fastcdr
    {
        class Cdr;
    }
}

/*!
 * @brief This class represents the structure RobotPosition defined by the user in the IDL file.
 * @ingroup ROBOTPOSITION
 */
class RobotPosition
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport RobotPosition();
    
    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~RobotPosition();
    
    /*!
     * @brief Copy constructor.
     * @param x Reference to the object RobotPosition that will be copied.
     */
    eProsima_user_DllExport RobotPosition(const RobotPosition &x);
    
    /*!
     * @brief Move constructor.
     * @param x Reference to the object RobotPosition that will be copied.
     */
    eProsima_user_DllExport RobotPosition(RobotPosition &&x);
    
    /*!
     * @brief Copy assignment.
     * @param x Reference to the object RobotPosition that will be copied.
     */
    eProsima_user_DllExport RobotPosition& operator=(const RobotPosition &x);
    
    /*!
     * @brief Move assignment.
     * @param x Reference to the object RobotPosition that will be copied.
     */
    eProsima_user_DllExport RobotPosition& operator=(RobotPosition &&x);
    
    /*!
     * @brief This function sets a value in member floor
     * @param _floor New value for member floor
     */
    inline eProsima_user_DllExport void floor(uint32_t _floor)
    {
        m_floor = _floor;
    }

    /*!
     * @brief This function returns the value of member floor
     * @return Value of member floor
     */
    inline eProsima_user_DllExport uint32_t floor() const
    {
        return m_floor;
    }

    /*!
     * @brief This function returns a reference to member floor
     * @return Reference to member floor
     */
    inline eProsima_user_DllExport uint32_t& floor()
    {
        return m_floor;
    }
    /*!
     * @brief This function sets a value in member x
     * @param _x New value for member x
     */
    inline eProsima_user_DllExport void x(uint32_t _x)
    {
        m_x = _x;
    }

    /*!
     * @brief This function returns the value of member x
     * @return Value of member x
     */
    inline eProsima_user_DllExport uint32_t x() const
    {
        return m_x;
    }

    /*!
     * @brief This function returns a reference to member x
     * @return Reference to member x
     */
    inline eProsima_user_DllExport uint32_t& x()
    {
        return m_x;
    }
    /*!
     * @brief This function sets a value in member y
     * @param _y New value for member y
     */
    inline eProsima_user_DllExport void y(uint32_t _y)
    {
        m_y = _y;
    }

    /*!
     * @brief This function returns the value of member y
     * @return Value of member y
     */
    inline eProsima_user_DllExport uint32_t y() const
    {
        return m_y;
    }

    /*!
     * @brief This function returns a reference to member y
     * @return Reference to member y
     */
    inline eProsima_user_DllExport uint32_t& y()
    {
        return m_y;
    }
    /*!
     * @brief This function sets a value in member zeta
     * @param _zeta New value for member zeta
     */
    inline eProsima_user_DllExport void zeta(uint32_t _zeta)
    {
        m_zeta = _zeta;
    }

    /*!
     * @brief This function returns the value of member zeta
     * @return Value of member zeta
     */
    inline eProsima_user_DllExport uint32_t zeta() const
    {
        return m_zeta;
    }

    /*!
     * @brief This function returns a reference to member zeta
     * @return Reference to member zeta
     */
    inline eProsima_user_DllExport uint32_t& zeta()
    {
        return m_zeta;
    }
    
    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const RobotPosition& data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
    
private:
    uint32_t m_floor;
    uint32_t m_x;
    uint32_t m_y;
    uint32_t m_zeta;
};

#endif // _RobotPosition_H_