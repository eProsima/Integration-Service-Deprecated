// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file CameraInfoPubSubTypes.cpp
 * This header file contains the implementation of the serialization functions.
 *
 * This file was generated by the tool fastcdrgen.
 */


#include <fastcdr/FastBuffer.h>
#include <fastcdr/Cdr.h>

#include "CameraInfoPubSubTypes.h"

using namespace eprosima::fastrtps;
using namespace eprosima::fastrtps::rtps;

GuestLocationPubSubType::GuestLocationPubSubType() {
    setName("GuestLocation");
    m_typeSize = (uint32_t)GuestLocation::getMaxCdrSerializedSize() + 4 /*encapsulation*/;
    m_isGetKeyDefined = GuestLocation::isKeyDefined();
    m_keyBuffer = (unsigned char*)malloc(GuestLocation::getKeyMaxCdrSerializedSize()>16 ? GuestLocation::getKeyMaxCdrSerializedSize() : 16);
}

GuestLocationPubSubType::~GuestLocationPubSubType() {
    if(m_keyBuffer!=nullptr)
        free(m_keyBuffer);
}

bool GuestLocationPubSubType::serialize(void *data, SerializedPayload_t *payload) {
    GuestLocation *p_type = (GuestLocation*) data;
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload->data, payload->max_size); // Object that manages the raw buffer.
    eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN,
            eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload->encapsulation = ser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;
    // Serialize encapsulation
    ser.serialize_encapsulation();

    try
    {
        p_type->serialize(ser); // Serialize the object:
    }
    catch(eprosima::fastcdr::exception::NotEnoughMemoryException& /*exception*/)
    {
        return false;
    }

    payload->length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    return true;
}

bool GuestLocationPubSubType::deserialize(SerializedPayload_t* payload, void* data) {
    GuestLocation* p_type = (GuestLocation*) data; 	//Convert DATA to pointer of your type
    eprosima::fastcdr::FastBuffer fastbuffer((char*)payload->data, payload->length); // Object that manages the raw buffer.
    eprosima::fastcdr::Cdr deser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN,
            eprosima::fastcdr::Cdr::DDS_CDR); // Object that deserializes the data.
    // Deserialize encapsulation.
    deser.read_encapsulation();
    payload->encapsulation = deser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;

    try
    {
        p_type->deserialize(deser); //Deserialize the object:
    }
    catch(eprosima::fastcdr::exception::NotEnoughMemoryException& /*exception*/)
    {
        return false;
    }

    return true;
}

std::function<uint32_t()> GuestLocationPubSubType::getSerializedSizeProvider(void* data) {
    return [data]() -> uint32_t
    {
        return (uint32_t)type::getCdrSerializedSize(*static_cast<GuestLocation*>(data)) + 4 /*encapsulation*/;
    };
}

void* GuestLocationPubSubType::createData() {
    return (void*)new GuestLocation();
}

void GuestLocationPubSubType::deleteData(void* data) {
    delete((GuestLocation*)data);
}

bool GuestLocationPubSubType::getKey(void *data, InstanceHandle_t* handle) {
    if(!m_isGetKeyDefined)
        return false;
    GuestLocation* p_type = (GuestLocation*) data;
    eprosima::fastcdr::FastBuffer fastbuffer((char*)m_keyBuffer,GuestLocation::getKeyMaxCdrSerializedSize()); 	// Object that manages the raw buffer.
    eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::BIG_ENDIANNESS); 	// Object that serializes the data.
    p_type->serializeKey(ser);
    if(GuestLocation::getKeyMaxCdrSerializedSize()>16)	{
        m_md5.init();
        m_md5.update(m_keyBuffer,(unsigned int)ser.getSerializedDataLength());
        m_md5.finalize();
        for(uint8_t i = 0;i<16;++i)    	{
            handle->value[i] = m_md5.digest[i];
        }
    }
    else    {
        for(uint8_t i = 0;i<16;++i)    	{
            handle->value[i] = m_keyBuffer[i];
        }
    }
    return true;
}

GuestFeaturePubSubType::GuestFeaturePubSubType() {
    setName("GuestFeature");
    m_typeSize = (uint32_t)GuestFeature::getMaxCdrSerializedSize() + 4 /*encapsulation*/;
    m_isGetKeyDefined = GuestFeature::isKeyDefined();
    m_keyBuffer = (unsigned char*)malloc(GuestFeature::getKeyMaxCdrSerializedSize()>16 ? GuestFeature::getKeyMaxCdrSerializedSize() : 16);
}

GuestFeaturePubSubType::~GuestFeaturePubSubType() {
    if(m_keyBuffer!=nullptr)
        free(m_keyBuffer);
}

bool GuestFeaturePubSubType::serialize(void *data, SerializedPayload_t *payload) {
    GuestFeature *p_type = (GuestFeature*) data;
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload->data, payload->max_size); // Object that manages the raw buffer.
    eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN,
            eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload->encapsulation = ser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;
    // Serialize encapsulation
    ser.serialize_encapsulation();

    try
    {
        p_type->serialize(ser); // Serialize the object:
    }
    catch(eprosima::fastcdr::exception::NotEnoughMemoryException& /*exception*/)
    {
        return false;
    }

    payload->length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    return true;
}

bool GuestFeaturePubSubType::deserialize(SerializedPayload_t* payload, void* data) {
    GuestFeature* p_type = (GuestFeature*) data; 	//Convert DATA to pointer of your type
    eprosima::fastcdr::FastBuffer fastbuffer((char*)payload->data, payload->length); // Object that manages the raw buffer.
    eprosima::fastcdr::Cdr deser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN,
            eprosima::fastcdr::Cdr::DDS_CDR); // Object that deserializes the data.
    // Deserialize encapsulation.
    deser.read_encapsulation();
    payload->encapsulation = deser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;

    try
    {
        p_type->deserialize(deser); //Deserialize the object:
    }
    catch(eprosima::fastcdr::exception::NotEnoughMemoryException& /*exception*/)
    {
        return false;
    }

    return true;
}

std::function<uint32_t()> GuestFeaturePubSubType::getSerializedSizeProvider(void* data) {
    return [data]() -> uint32_t
    {
        return (uint32_t)type::getCdrSerializedSize(*static_cast<GuestFeature*>(data)) + 4 /*encapsulation*/;
    };
}

void* GuestFeaturePubSubType::createData() {
    return (void*)new GuestFeature();
}

void GuestFeaturePubSubType::deleteData(void* data) {
    delete((GuestFeature*)data);
}

bool GuestFeaturePubSubType::getKey(void *data, InstanceHandle_t* handle) {
    if(!m_isGetKeyDefined)
        return false;
    GuestFeature* p_type = (GuestFeature*) data;
    eprosima::fastcdr::FastBuffer fastbuffer((char*)m_keyBuffer,GuestFeature::getKeyMaxCdrSerializedSize()); 	// Object that manages the raw buffer.
    eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::BIG_ENDIANNESS); 	// Object that serializes the data.
    p_type->serializeKey(ser);
    if(GuestFeature::getKeyMaxCdrSerializedSize()>16)	{
        m_md5.init();
        m_md5.update(m_keyBuffer,(unsigned int)ser.getSerializedDataLength());
        m_md5.finalize();
        for(uint8_t i = 0;i<16;++i)    	{
            handle->value[i] = m_md5.digest[i];
        }
    }
    else    {
        for(uint8_t i = 0;i<16;++i)    	{
            handle->value[i] = m_keyBuffer[i];
        }
    }
    return true;
}

CameraInfoPubSubType::CameraInfoPubSubType() {
    setName("CameraInfo");
    m_typeSize = (uint32_t)CameraInfo::getMaxCdrSerializedSize() + 4 /*encapsulation*/;
    m_isGetKeyDefined = CameraInfo::isKeyDefined();
    m_keyBuffer = (unsigned char*)malloc(CameraInfo::getKeyMaxCdrSerializedSize()>16 ? CameraInfo::getKeyMaxCdrSerializedSize() : 16);
}

CameraInfoPubSubType::~CameraInfoPubSubType() {
    if(m_keyBuffer!=nullptr)
        free(m_keyBuffer);
}

bool CameraInfoPubSubType::serialize(void *data, SerializedPayload_t *payload) {
    CameraInfo *p_type = (CameraInfo*) data;
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload->data, payload->max_size); // Object that manages the raw buffer.
    eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN,
            eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload->encapsulation = ser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;
    // Serialize encapsulation
    ser.serialize_encapsulation();

    try
    {
        p_type->serialize(ser); // Serialize the object:
    }
    catch(eprosima::fastcdr::exception::NotEnoughMemoryException& /*exception*/)
    {
        return false;
    }

    payload->length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    return true;
}

bool CameraInfoPubSubType::deserialize(SerializedPayload_t* payload, void* data) {
    CameraInfo* p_type = (CameraInfo*) data; 	//Convert DATA to pointer of your type
    eprosima::fastcdr::FastBuffer fastbuffer((char*)payload->data, payload->length); // Object that manages the raw buffer.
    eprosima::fastcdr::Cdr deser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN,
            eprosima::fastcdr::Cdr::DDS_CDR); // Object that deserializes the data.
    // Deserialize encapsulation.
    deser.read_encapsulation();
    payload->encapsulation = deser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;

    try
    {
        p_type->deserialize(deser); //Deserialize the object:
    }
    catch(eprosima::fastcdr::exception::NotEnoughMemoryException& /*exception*/)
    {
        return false;
    }

    return true;
}

std::function<uint32_t()> CameraInfoPubSubType::getSerializedSizeProvider(void* data) {
    return [data]() -> uint32_t
    {
        return (uint32_t)type::getCdrSerializedSize(*static_cast<CameraInfo*>(data)) + 4 /*encapsulation*/;
    };
}

void* CameraInfoPubSubType::createData() {
    return (void*)new CameraInfo();
}

void CameraInfoPubSubType::deleteData(void* data) {
    delete((CameraInfo*)data);
}

bool CameraInfoPubSubType::getKey(void *data, InstanceHandle_t* handle) {
    if(!m_isGetKeyDefined)
        return false;
    CameraInfo* p_type = (CameraInfo*) data;
    eprosima::fastcdr::FastBuffer fastbuffer((char*)m_keyBuffer,CameraInfo::getKeyMaxCdrSerializedSize()); 	// Object that manages the raw buffer.
    eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::BIG_ENDIANNESS); 	// Object that serializes the data.
    p_type->serializeKey(ser);
    if(CameraInfo::getKeyMaxCdrSerializedSize()>16)	{
        m_md5.init();
        m_md5.update(m_keyBuffer,(unsigned int)ser.getSerializedDataLength());
        m_md5.finalize();
        for(uint8_t i = 0;i<16;++i)    	{
            handle->value[i] = m_md5.digest[i];
        }
    }
    else    {
        for(uint8_t i = 0;i<16;++i)    	{
            handle->value[i] = m_keyBuffer[i];
        }
    }
    return true;
}

