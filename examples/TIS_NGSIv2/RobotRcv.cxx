// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file RobotRcv.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "RobotRcv.h"

#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


RobotRcv::RobotRcv()
{



    m_state = ::ACTION;
}

RobotRcv::~RobotRcv()
{
}

RobotRcv::RobotRcv(const RobotRcv &x)
{
    m_robot_id = x.m_robot_id;
    m_transmission_time = x.m_transmission_time;
    m_destination = x.m_destination;
    m_state = x.m_state;
}

RobotRcv::RobotRcv(RobotRcv &&x)
{
    m_robot_id = std::move(x.m_robot_id);
    m_transmission_time = std::move(x.m_transmission_time);
    m_destination = std::move(x.m_destination);
    m_state = x.m_state;
}

RobotRcv& RobotRcv::operator=(const RobotRcv &x)
{
    m_robot_id = x.m_robot_id;
    m_transmission_time = x.m_transmission_time;
    m_destination = x.m_destination;
    m_state = x.m_state;
    
    return *this;
}

RobotRcv& RobotRcv::operator=(RobotRcv &&x)
{
    m_robot_id = std::move(x.m_robot_id);
    m_transmission_time = std::move(x.m_transmission_time);
    m_destination = std::move(x.m_destination);
    m_state = x.m_state;
    
    return *this;
}

size_t RobotRcv::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += RobotPosition::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    return current_alignment - initial_alignment;
}

size_t RobotRcv::getCdrSerializedSize(const RobotRcv& data, size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.robot_id().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.transmission_time().size() + 1;

    current_alignment += RobotPosition::getCdrSerializedSize(data.destination(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    return current_alignment - initial_alignment;
}

void RobotRcv::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m_robot_id;
    scdr << m_transmission_time;
    scdr << m_destination;
    scdr << (uint32_t)m_state;
}

void RobotRcv::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr >> m_robot_id;
    dcdr >> m_transmission_time;
    dcdr >> m_destination;
    dcdr >> (uint32_t&)m_state;
}

size_t RobotRcv::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;
            





    return current_align;
}

bool RobotRcv::isKeyDefined()
{
    return false;
}

void RobotRcv::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	 
	 
	 
	 
}