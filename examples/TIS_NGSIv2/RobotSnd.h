// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file RobotSnd.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _RobotSnd_H_
#define _RobotSnd_H_

// TODO Poner en el contexto.
#include "RobotPosition.h"

#include <stdint.h>
#include <array>
#include <string>
#include <vector>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(RobotSnd_SOURCE)
#define RobotSnd_DllAPI __declspec( dllexport )
#else
#define RobotSnd_DllAPI __declspec( dllimport )
#endif // RobotSnd_SOURCE
#else
#define RobotSnd_DllAPI
#endif
#else
#define RobotSnd_DllAPI
#endif // _WIN32

namespace eprosima
{
    namespace fastcdr
    {
        class Cdr;
    }
}

/*!
 * @brief This class represents the structure RobotSnd defined by the user in the IDL file.
 * @ingroup ROBOTSND
 */
class RobotSnd
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport RobotSnd();
    
    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~RobotSnd();
    
    /*!
     * @brief Copy constructor.
     * @param x Reference to the object RobotSnd that will be copied.
     */
    eProsima_user_DllExport RobotSnd(const RobotSnd &x);
    
    /*!
     * @brief Move constructor.
     * @param x Reference to the object RobotSnd that will be copied.
     */
    eProsima_user_DllExport RobotSnd(RobotSnd &&x);
    
    /*!
     * @brief Copy assignment.
     * @param x Reference to the object RobotSnd that will be copied.
     */
    eProsima_user_DllExport RobotSnd& operator=(const RobotSnd &x);
    
    /*!
     * @brief Move assignment.
     * @param x Reference to the object RobotSnd that will be copied.
     */
    eProsima_user_DllExport RobotSnd& operator=(RobotSnd &&x);
    
    /*!
     * @brief This function copies the value in member robot_id
     * @param _robot_id New value to be copied in member robot_id
     */
    inline eProsima_user_DllExport void robot_id(const std::string &_robot_id)
    {
        m_robot_id = _robot_id;
    }

    /*!
     * @brief This function moves the value in member robot_id
     * @param _robot_id New value to be moved in member robot_id
     */
    inline eProsima_user_DllExport void robot_id(std::string &&_robot_id)
    {
        m_robot_id = std::move(_robot_id);
    }

    /*!
     * @brief This function returns a constant reference to member robot_id
     * @return Constant reference to member robot_id
     */
    inline eProsima_user_DllExport const std::string& robot_id() const
    {
        return m_robot_id;
    }

    /*!
     * @brief This function returns a reference to member robot_id
     * @return Reference to member robot_id
     */
    inline eProsima_user_DllExport std::string& robot_id()
    {
        return m_robot_id;
    }
    /*!
     * @brief This function copies the value in member transmission_time
     * @param _transmission_time New value to be copied in member transmission_time
     */
    inline eProsima_user_DllExport void transmission_time(const std::string &_transmission_time)
    {
        m_transmission_time = _transmission_time;
    }

    /*!
     * @brief This function moves the value in member transmission_time
     * @param _transmission_time New value to be moved in member transmission_time
     */
    inline eProsima_user_DllExport void transmission_time(std::string &&_transmission_time)
    {
        m_transmission_time = std::move(_transmission_time);
    }

    /*!
     * @brief This function returns a constant reference to member transmission_time
     * @return Constant reference to member transmission_time
     */
    inline eProsima_user_DllExport const std::string& transmission_time() const
    {
        return m_transmission_time;
    }

    /*!
     * @brief This function returns a reference to member transmission_time
     * @return Reference to member transmission_time
     */
    inline eProsima_user_DllExport std::string& transmission_time()
    {
        return m_transmission_time;
    }
    /*!
     * @brief This function copies the value in member position
     * @param _position New value to be copied in member position
     */
    inline eProsima_user_DllExport void position(const RobotPosition &_position)
    {
        m_position = _position;
    }

    /*!
     * @brief This function moves the value in member position
     * @param _position New value to be moved in member position
     */
    inline eProsima_user_DllExport void position(RobotPosition &&_position)
    {
        m_position = std::move(_position);
    }

    /*!
     * @brief This function returns a constant reference to member position
     * @return Constant reference to member position
     */
    inline eProsima_user_DllExport const RobotPosition& position() const
    {
        return m_position;
    }

    /*!
     * @brief This function returns a reference to member position
     * @return Reference to member position
     */
    inline eProsima_user_DllExport RobotPosition& position()
    {
        return m_position;
    }
    
    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const RobotSnd& data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
    
private:
    std::string m_robot_id;
    std::string m_transmission_time;
    RobotPosition m_position;
};

#endif // _RobotSnd_H_